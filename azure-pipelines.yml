# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
variables:
  vcpkgGitRef: 0ee4f000bd3405ab79be4f005f778ba3c314b2e5

steps:
- script: echo Create MeshTools
  displayName: 'MeshTools started'
- script: |
    sudo apt -y update
    sudo apt install build-essential -y

    # Cache/Restore the vcpkg's build artifacts.
- task: Cache@2
  displayName: 'Cache vcpkg artifacts'
  inputs:
    # As 'key' use the content of the response file, vcpkg's submodule fetched commit id and the platform name.
    # The key must be one liner, each segment separated by pipe char, non-path segments enclosed by
    # double quotes.
    key: $(Build.SourcesDirectory)/vcpkg_x64-linux.txt | "$(Build.SourcesDirectory)/.git/modules/vcpkg/HEAD" | "$(Agent.OS)"
    path: '$(Build.SourcesDirectory)/vcpkg'
- task: run-vcpkg@0
  displayName: 'Run vcpkg'
  inputs:
    # Response file stored in source control, it provides the list of ports and triplet(s).
    vcpkgArguments: @$(Build.SourcesDirectory)/vcpkg_x64-linux.txt
    # Location of the vcpkg as submodule of the repository.
    vcpkgDirectory: $(Build.SourcesDirectory)/vcpkg

- task: run-cmake@0
  displayName: 'Run CMake with CMakeSettings.json'
  inputs:
    cmakeListsOrSettingsJson: 'CMakeSettingsJson'
    # Use the vcpkg's toolchain file for CMake.
    useVcpkgToolchainFile: true
    # Build all configurations whose name starts with "Linux".
    configurationRegexFilter: 'Linux.*'

- task: CMake@1
  inputs:
    cmakeArgs: '..'
- task: CMake@1
  displayName: 'CMake --build . --config Release'
  inputs:
    cmakeArgs: '--build . --config Release'
    
- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'
